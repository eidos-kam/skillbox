print('Задача 7. Яйца')

# В рамках программы колонизации Марса
# компания «Спейс Инжиниринг» вывела особую породу черепах,
# которые, по задумке, должны размножаться, откладывая яйца в марсианском грунте.
# Откладывать яйца слишком близко к поверхности опасно из-за радиации,
# а слишком глубоко — из-за давления грунта и недостатка кислорода.
# Вообще, факторов очень много,
# но специалисты проделали большую работу и предположили,
# что уровень опасности для черепашьих яиц рассчитывается по формуле
# D = x**3 − 3x**2 − 12x + 10,
# где x — глубина кладки в метрах,
# а D — уровень опасности в условных единицах.
#
# Для тестирования гипотезы
# нужно взять пробу грунта на безопасной, согласно формуле, глубине.
#
# Напишите программу,
# находящую такое значение глубины "х", при котором уровень опасности как можно более близок к нулю.
# На вход программе подаётся максимально допустимое отклонение уровня опасности от нуля,
# а программа должна рассчитать приблизительное значение "х",
# удовлетворяющее этому отклонению.
#
# Известно, что глубина точно больше нуля и меньше четырёх метров.
#
# Обеспечьте контроль ввода.
#
# Пример:
# Введите максимально допустимый уровень опасности: 0.01
#
# Приблизительная глубина безопасной кладки: 0.732421875 м


def get_input_data(input_string: str):
    while True:
        result_item = input(input_string)
        if result_item.replace('.', '', 1).isdigit() and float(result_item) > 0:
            return float(result_item)
        else:
            print("Вы ошиблись при вводе")


def func(x):
    """
    Вычисляет значение функции в точке х
    :param x:
    :return:
    """
    return x ** 3 - 3 * x ** 2 - 12 * x + 10


def func_derivative(x):
    """
    Вычисляет значение производной в точке х
    :param x:
    :return:
    """
    return 3 * x ** 2 - 6 * x - 12


def main():
    danger_limit = get_input_data("Введите максимально допустимый уровень опасности: ")
    step = 0.01
    current_x = previous_x = 0
    iteration = 0
    while True:
        # двинемся на один шаг в сторону уменьшения функции
        derivative = func_derivative(previous_x)
        current_x = previous_x - step * func_derivative(previous_x)
        # print(f"Итерация {iteration} шаг градиента= {step}, глубина спуска= {format(current_x, '.10f')}, "
        #       f"значение функции= {format(func(current_x), '.10f')}, производная= {derivative}")
        func_value = func(current_x)
        if abs(func_value) <= danger_limit:
            # заданная точность достигнута. Расходимся
            break
        elif func_value < 0:
            # поднимемся обратно и уменьшим размер градиента тем самым повысив точность поиска
            step /= 2
            # print(f"Поднимаемся обратно: шаг градиента= {step}\n")
        else:
            previous_x = current_x
        iteration += 1
    print(f"Приблизительная глубина безопасной кладки {format(current_x, '.10f')} м")

main()